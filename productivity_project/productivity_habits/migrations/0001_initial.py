# Generated by Django 4.2.20 on 2025-03-25 00:28

import django.core.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='FocusSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=django.utils.timezone.now, verbose_name='Date')),
                ('start_time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Start Time')),
                ('end_time', models.DateTimeField(blank=True, null=True, verbose_name='End Time')),
                ('duration_minutes', models.PositiveIntegerField(default=0, verbose_name='Duration (minutes)')),
                ('description', models.CharField(blank=True, max_length=200, verbose_name='Description')),
                ('is_completed', models.BooleanField(default=False, verbose_name='Completed')),
                ('notes', models.TextField(blank=True, verbose_name='Notes')),
            ],
            options={
                'verbose_name': 'Focus Session',
                'verbose_name_plural': 'Focus Sessions',
                'ordering': ['-start_time'],
            },
        ),
        migrations.CreateModel(
            name='Invitee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='Email')),
            ],
            options={
                'verbose_name': 'Invitee',
                'verbose_name_plural': 'Invitees',
            },
        ),
        migrations.CreateModel(
            name='MorningManifesto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=django.utils.timezone.now, verbose_name='Date')),
                ('weekly_priorities_reviewed', models.BooleanField(default=False, verbose_name='Weekly Priorities Reviewed')),
                ('priority_notes', models.TextField(blank=True, verbose_name='Weekly Priorities Notes')),
                ('todays_adventure', models.CharField(help_text='What is the most important thing to accomplish today?', max_length=200, verbose_name="Today's Adventure")),
                ('notes', models.TextField(blank=True, verbose_name='Additional Notes')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Morning Manifesto',
                'verbose_name_plural': 'Morning Manifestos',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='QuarterlyQuest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='Title')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('category', models.CharField(choices=[('work', 'Work'), ('life', 'Life')], default='work', max_length=10, verbose_name='Category')),
                ('start_date', models.DateField(default=django.utils.timezone.now, verbose_name='Start Date')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='End Date')),
                ('status', models.CharField(choices=[('active', 'Active'), ('completed', 'Completed'), ('abandoned', 'Abandoned')], default='active', max_length=10, verbose_name='Status')),
                ('progress', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Progress (%)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Quarterly Quest',
                'verbose_name_plural': 'Quarterly Quests',
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='SocialEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='Title')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('location', models.CharField(blank=True, max_length=200, verbose_name='Location')),
                ('day_of_week', models.IntegerField(choices=[(0, 'Monday'), (1, 'Tuesday'), (2, 'Wednesday'), (3, 'Thursday'), (4, 'Friday'), (5, 'Saturday'), (6, 'Sunday')], verbose_name='Day of Week')),
                ('time', models.TimeField(verbose_name='Time')),
                ('frequency', models.CharField(choices=[('weekly', 'Weekly'), ('biweekly', 'Biweekly'), ('monthly', 'Monthly')], default='weekly', max_length=10, verbose_name='Frequency')),
                ('start_date', models.DateField(default=django.utils.timezone.now, verbose_name='Start Date')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Social Event',
                'verbose_name_plural': 'Social Events',
                'ordering': ['day_of_week', 'time'],
            },
        ),
        migrations.CreateModel(
            name='VoiceNote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=100, verbose_name='Title')),
                ('date', models.DateField(default=django.utils.timezone.now, verbose_name='Date')),
                ('audio_file', models.FileField(upload_to='voice_notes/%Y/%m/%d/', verbose_name='Audio File')),
                ('transcript', models.TextField(blank=True, verbose_name='Transcript')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Voice Note',
                'verbose_name_plural': 'Voice Notes',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='WeeklyReset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=django.utils.timezone.now, verbose_name='Date')),
                ('wins', models.TextField(blank=True, help_text='List your wins from the previous week', verbose_name='Wins from Previous Week')),
                ('quest_notes', models.TextField(blank=True, help_text='Review progress on your quarterly quests', verbose_name='Quarterly Quest Check-in')),
                ('priority_1', models.CharField(blank=True, max_length=200, verbose_name='Priority 1')),
                ('priority_2', models.CharField(blank=True, max_length=200, verbose_name='Priority 2')),
                ('priority_3', models.CharField(blank=True, max_length=200, verbose_name='Priority 3')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Weekly Reset',
                'verbose_name_plural': 'Weekly Resets',
                'ordering': ['-date'],
            },
        ),
    ]
